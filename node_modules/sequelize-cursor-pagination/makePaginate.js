"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const sequelize_1 = require("sequelize");
const utils_1 = require("./utils");
const makePaginate = (model, options) => {
    const primaryKeyField = options?.primaryKeyField ?? (0, utils_1.getPrimaryKeyFields)(model);
    const omitPrimaryKeyFromOrder = options?.omitPrimaryKeyFromOrder ?? false;
    const paginate = async (queryOptions) => {
        const { order: orderOption, where, after, before, limit, ...restQueryOptions } = queryOptions;
        const normalizedOrder = (0, utils_1.normalizeOrder)(orderOption, primaryKeyField, omitPrimaryKeyFromOrder);
        const order = before ? (0, utils_1.reverseOrder)(normalizedOrder) : normalizedOrder;
        const cursor = after
            ? (0, utils_1.parseCursor)(after)
            : before
                ? (0, utils_1.parseCursor)(before)
                : null;
        const paginationQuery = cursor ? (0, utils_1.getPaginationQuery)(order, cursor) : null;
        const paginationWhere = paginationQuery
            ? { [sequelize_1.Op.and]: [paginationQuery, where] }
            : where;
        const paginationQueryOptions = {
            where: paginationWhere,
            limit,
            order,
            ...restQueryOptions,
        };
        const totalCountQueryOptions = {
            where,
            ...restQueryOptions,
        };
        const cursorCountQueryOptions = {
            where: paginationWhere,
            ...restQueryOptions,
        };
        const [instances, totalCount, cursorCount] = await Promise.all([
            model.findAll(paginationQueryOptions),
            model.count(totalCountQueryOptions),
            model.count(cursorCountQueryOptions),
        ]);
        if (before) {
            instances.reverse();
        }
        const remaining = cursorCount - instances.length;
        const hasNextPage = (!before && remaining > 0) ||
            (Boolean(before) && totalCount - cursorCount > 0);
        const hasPreviousPage = (Boolean(before) && remaining > 0) ||
            (!before && totalCount - cursorCount > 0);
        const edges = instances.map((node) => ({
            node,
            cursor: (0, utils_1.createCursor)(node, order),
        }));
        const pageInfo = {
            hasNextPage,
            hasPreviousPage,
            startCursor: edges.length > 0 ? edges[0].cursor : null,
            endCursor: edges.length > 0 ? edges[edges.length - 1].cursor : null,
        };
        return {
            totalCount,
            edges,
            pageInfo,
        };
    };
    return paginate;
};
exports.default = makePaginate;
